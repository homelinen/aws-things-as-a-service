!!!html5

%html
  %head
    %title AWS: Things as a Service
    :sass
      @font-face
        font-family: Roboto
        src: url(fonts/Roboto-Regular.ttf)

      .remark-slide-content
        color: #002b36
        font-family: Roboto
        font-size: 130%
        background-color: #f7f7f7

      // Multicolumn list hack
      .left
        ol
          padding: 0
          margin: 0
        li
          width: 28%
          font-size: 0.7em
          float: left
          padding: 0.1em
          margin-left: 1.6em

      .footnote
        font-size: 0.9em

      // Colours!
      .grey
        color: #828e8e
      .red
        color: #dc322f
      .green
        color: #859900 
      .yellow
        color: #b58900
      .blue
        color: #268bd2
      
  %body

    %textarea{id: 'source'}
      :preserve
        class: center middle

        # Amazon Web Services
        
        ## Embracing the lock-in

        ---

        # Me

        * Calum Gilchrist
        * DevOps Engineer at FanDuel
        * Been using AWS for 2 years
        * Have 2 AWS Certifications
        * Manage ~800 Servers across live and test at the moment

        ---

        # AWS Products

        There are quite a few [aws.amazon.com/products](https://aws.amazon.com/products/)

        .left[
        1. Amazon EC2  
        1. Amazon EC2 Container Service  
        1. AWS Lambda  
        1. Auto Scaling  
        1. Amazon VPC  
        1. Elastic Load Balancing  
        1. Amazon S3  
        1. Amazon Glacier  
        1. Amazon EBS  
        1. Amazon Elastic File System  
        1. AWS Import/Export  
        1. AWS Storage Gateway  
        1. Amazon CloudFront  
        1. Amazon RDS  
        1. Amazon DynamoDB  
        1. Amazon Redshift  
        1. Amazon ElastiCache  
        1. AWS Direct Connect  
        1. Amazon Route 53  
        1. AWS Directory Service  
        1. AWS Identity and Access Management (IAM)  
        1. AWS CloudTrail  
        1. AWS Config  
        1. AWS CloudHSM  
        1. AWS Key Management Service  
        1. Amazon CloudWatch  
        1. AWS Trusted Advisor  
        1. Amazon EMR  
        1. Amazon Kinesis  
        1. Amazon Redshift  
        1. AWS Data Pipeline  
        1. Amazon Machine Learning  
        1. Amazon SQS  
        1. Amazon SWF  
        1. Amazon AppStream  
        1. Amazon SES  
        1. Amazon CloudSearch  
        1. Amazon SNS  
        1. Amazon FPS (Flexible Payment Service)  
        1. AWS Elastic Beanstalk  
        1. AWS OpsWorks  
        1. AWS CloudFormation  
        1. AWS CodeDeploy  
        1. Amazon Cognito  
        1. Amazon Mobile Analytics  
        1. Amazon SNS  
        1. Amazon WorkSpaces  
        1. Amazon WorkDocs  
        1. AWS Support  
        1. AWS Trusted Advisor  
        1. Amazon Elastic Transcoder  
        ]

        ---

        # AWS Products

        There are quite a few [aws.amazon.com/products](https://aws.amazon.com/products/)

        .grey[.left[
        1. .blue[Amazon EC2]
        1. .blue[Amazon EC2 Container Service]  
        1. .blue[AWS Lambda]  
        1. .blue[Auto Scaling]  
        1. .yellow[Amazon VPC]  
        1. .blue[Elastic Load Balancing]  
        1. Amazon S3  
        1. Amazon Glacier  
        1. .yellow[Amazon EBS]  
        1. Amazon Elastic File System  
        1. AWS Import/Export  
        1. AWS Storage Gateway  
        1. Amazon CloudFront  
        1. .blue[Amazon RDS]  
        1. .blue[Amazon DynamoDB]  
        1. Amazon blueshift  
        1. .blue[Amazon ElastiCache]  
        1. AWS Direct Connect  
        1. Amazon Route 53  
        1. AWS Directory Service  
        1. .yellow[AWS Identity and Access Management (IAM)]
        1. AWS CloudTrail  
        1. AWS Config  
        1. AWS CloudHSM  
        1. AWS Key Management Service  
        1. .yellow[Amazon CloudWatch]  
        1. AWS Trusted Advisor  
        1. Amazon EMR  
        1. Amazon Kinesis  
        1. Amazon blueshift  
        1. AWS Data Pipeline  
        1. Amazon Machine Learning  
        1. Amazon SQS  
        1. Amazon SWF  
        1. Amazon AppStream  
        1. Amazon SES  
        1. Amazon CloudSearch  
        1. .blue[Amazon SNS]  
        1. Amazon FPS (Flexible Payment Service)  
        1. .blue[AWS Elastic Beanstalk]  
        1. AWS OpsWorks  
        1. .blue[AWS CloudFormation]  
        1. AWS CodeDeploy  
        1. Amazon Cognito  
        1. Amazon Mobile Analytics  
        1. .blue[Amazon SNS]  
        1. Amazon WorkSpaces  
        1. Amazon WorkDocs  
        1. AWS Support  
        1. AWS Trusted Advisor  
        1. Amazon Elastic Transcoder  
        ]]

        ---

        ## What is AWS?

        * An AWS data center is called an Availability Zone. 
        * 3 or more Data centers make a region
        * There are currently 9 regions:
          * US East (N. Virginia)
          * US West (Oregon)
          * US West (N. California)
          * EU (Ireland)
          * EU (Frankfurt)
          * Asia Pacific (Singapore)
          * Asia Pacific (Sydney)
          * Asia Pacific (Tokyo)
          * South America (Sao Paulo)
        * Every region does not have every service

        ---

        # EC2 (Elastic Compute Cloud)

        Compute as a service

        * Core of AWS
        * Pay per hour
        * Behind the scenes, _everything_ is on EC2
        * AMIs (Amazon Machine Images) are used to provision
        * Snapshots out the box.red[*]
        * Firewalls for free.red[**]
        * VPC (Virtual Private Cloud)

        .footnote[
          \* But not on schedule
          
          \** There are limits]

        ---

        # Autoscaling

        The main reason to use AWS, IMO

        * Take an AMI
        * Pick an ELB
        * Setup alarms
        * Now you have autoscaling

        ---

        # ELB (Elastic Load Balancer)

        Load balancing as a service. 

        * Push some buttons
        * Add some instances
        * You're now loadbalancing!.red[*]
        * Pay per hour, flat rate \(Don't pay more for more traffic!\)
        

        ## Caveats

        * Cannot serve UDP
        * Only choice of balancing is round robin
        * Can get picky with long lived connections
        * Need to _warm_

        ---

        # RDS (Relational Database Service)

        Databases as service, never setup MySQL again, right?

        * Backups: Daily 
        --
        _for 30 days_ without custom scripting

        --

        * Recovery: point-in-time within retention period. 
        --
        _Unless you use MyISAM_

        --

        * Automatic failover to a read replica 
        --
        _takes 5 minutes to failover_, DNS

        * Encryption: use AWS KMS you can encrypt the data at rest.

        --

        * Things to Note
          * Limited Extensions for PostGres (PostGIS is one of the few)
          * MySQL Engines: InnoDB is expected
          * Aurora MySQL Engine promises a lot
          * Bring your own license for Oracle/MSSQL or pay on top of the hourly fee

        ---

        # DynamoDB

        A NoSQL database as a service

        * Highly scalabe
        * Infinitely large tables, 100 million row tables quite common
        * Pay for throughput
        * All about data partitioning!
        * One database per region

        ---

        # Elasticache

        In-Memory Caching as a Service

        * Supports:
          * Redis
          * Memcache
        * Automatic Failover to a Read Replica.red[*]

        .footnote[
        \* Same DNS failover as RDS, roughly 5 minutes to failover in testing
        ]
        ---

        # Elastic Beanstalk

        Heroku_?_ as a Service

        Very similar solution to Heroku

        * Give it a Git url
        * Fill in some forms
        * **POOF** you have an autoscaling server with a database and an ELB
        * Unlike Heroku, you get full access to the underlying EC2 instance

        ---

        # ECS _Elastic Container Service_ (in beta)

        Docker container management as a Service

        * Manage your Docker cluster and placement
        * Automatically replace "unhealthy" containers"
        * Installs containers onto running EC2 instances (still need to manage these)
        * Create a task definition in JSON, similar to Compose
        * Still in active development, console only added last month
        * ELBs sort of work, essentially map one container per instance

        ---

        # AWS Lambda

        Short lived functions as a service

        * Containers that last between 1-60 seconds
        * Run Javascript functions on Node.js
        * Spun up from the API or through SNS triggers
        * If you want cron you need another instance

        ---

        # SQS _Simple Queueing Service_

        A Queue as a service

        * Pay for throughput
        * Holds 2 weeks of messages
        * Throw as much as you want at it
        * Built in latency 

        ---

        # SNS _Simple Notification Service_

        Push notifications as a service

        * Can easily integrate with SQS and between other AWS Services
        * Send messages to one or more topics
        * A topic can be anything from Lambda, SQS to a REST API to SES (Simple Email Service)

        ---

        # The End

        * More information can be found at: [aws.amazon.com/products](https://aws.amazon.com/products/)
        * Read the FAQs, full of information about restrictions and gritty details
        * Slides made with: [github.com/gnab/remark](https://github.com/gnab/remark)
        * If interested in AWS there's an AWS Meetup in Edinburgh on the 9th
        July.
        [Amazon Web Services User Group
        Scotland](http://www.meetup.com/Amazon-Web-Services-User-Group-Scotland/events/222813260/)
        on Meetup.com.

        ## Me

        * me[AT]calumgilchrist.co.uk
        * [@homelinen](http://twitter.com/homelinen)
        
        FanDuel are hiring [fanduel.com/careers](http://fanduel.com/careers)


    %script{src: 'js/remark-latest.min.js'}
    %script
      var slideshow = remark.create();


